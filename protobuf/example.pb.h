// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h" // IWYU pragma: export
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/repeated_field.h" // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_example_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
} // namespace internal
} // namespace protobuf
} // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_example_2eproto;
class test;
struct testDefaultTypeInternal;
extern testDefaultTypeInternal _test_default_instance_;
namespace google {
namespace protobuf {} // namespace protobuf
} // namespace google

// ===================================================================

// -------------------------------------------------------------------

class test final
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:test) */ {
public:
  inline test() : test(nullptr) {}
  ~test() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR
      test(::google::protobuf::internal::ConstantInitialized);

  inline test(const test &from) : test(nullptr, from) {}
  test(test &&from) noexcept : test() { *this = ::std::move(from); }

  inline test &operator=(const test &from) {
    CopyFrom(from);
    return *this;
  }
  inline test &operator=(test &&from) noexcept {
    if (this == &from)
      return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &
  unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_
        .unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet *
  mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_
        .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor *GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection *GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const test &default_instance() { return *internal_default_instance(); }
  static inline const test *internal_default_instance() {
    return reinterpret_cast<const test *>(&_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(test &a, test &b) { a.Swap(&b); }
  inline void Swap(test *other) {
    if (other == this)
      return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(test *other) {
    if (other == this)
      return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  test *New(::google::protobuf::Arena *arena = nullptr) const final {
    return CreateMaybeMessage<test>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const test &from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const test &from) { test::MergeImpl(*this, from); }

private:
  static void MergeImpl(::google::protobuf::Message &to_msg,
                        const ::google::protobuf::Message &from_msg);

public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::google::protobuf::internal::ParseContext *ctx) final;
  ::uint8_t *_InternalSerialize(
      ::uint8_t *target,
      ::google::protobuf::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

private:
  ::google::protobuf::internal::CachedSize *AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena *arena);
  void SharedDtor();
  void InternalSwap(test *other);

private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test"; }

protected:
  explicit test(::google::protobuf::Arena *arena);
  test(::google::protobuf::Arena *arena, const test &from);

public:
  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData *GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kSFieldNumber = 2,
    kCFieldNumber = 3,
  };
  // optional string s = 2;
  bool has_s() const;
  void clear_s();
  const std::string &s() const;
  template <typename Arg_ = const std::string &, typename... Args_>
  void set_s(Arg_ &&arg, Args_... args);
  std::string *mutable_s();
  PROTOBUF_NODISCARD std::string *release_s();
  void set_allocated_s(std::string *value);

private:
  const std::string &_internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string &value);
  std::string *_internal_mutable_s();

public:
  // optional int32 a = 1;
  bool has_a() const;
  void clear_a();
  ::int32_t a() const;
  void set_a(::int32_t value);

private:
  ::int32_t _internal_a() const;
  void _internal_set_a(::int32_t value);

public:
  // optional uint32 c = 3;
  bool has_c() const;
  void clear_c();
  ::uint32_t c() const;
  void set_c(::uint32_t value);

private:
  ::uint32_t _internal_c() const;
  void _internal_set_c(::uint32_t value);

public:
  // @@protoc_insertion_point(class_scope:test)
private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 14, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena *arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena *arena, const Impl_ &from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr s_;
    ::int32_t a_;
    ::uint32_t c_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_example_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// -------------------------------------------------------------------

// test

// optional int32 a = 1;
inline bool test::has_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void test::clear_a() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.a_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t test::a() const {
  // @@protoc_insertion_point(field_get:test.a)
  return _internal_a();
}
inline void test::set_a(::int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:test.a)
}
inline ::int32_t test::_internal_a() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.a_;
}
inline void test::_internal_set_a(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.a_ = value;
}

// optional string s = 2;
inline bool test::has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void test::clear_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.s_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string &test::s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void test::set_s(Arg_ &&arg, Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_.Set(static_cast<Arg_ &&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.s)
}
inline std::string *test::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string *_s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:test.s)
  return _s;
}
inline const std::string &test::_internal_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.s_.Get();
}
inline void test::_internal_set_s(const std::string &value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_.Set(value, GetArena());
}
inline std::string *test::_internal_mutable_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.s_.Mutable(GetArena());
}
inline std::string *test::release_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:test.s)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto *released = _impl_.s_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s_.Set("", GetArena());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void test::set_allocated_s(std::string *value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.s_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s_.IsDefault()) {
    _impl_.s_.Set("", GetArena());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.s)
}

// optional uint32 c = 3;
inline bool test::has_c() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void test::clear_c() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.c_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t test::c() const {
  // @@protoc_insertion_point(field_get:test.c)
  return _internal_c();
}
inline void test::set_c(::uint32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:test.c)
}
inline ::uint32_t test::_internal_c() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.c_;
}
inline void test::_internal_set_c(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.c_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif // GOOGLE_PROTOBUF_INCLUDED_example_2eproto_2epb_2eh
